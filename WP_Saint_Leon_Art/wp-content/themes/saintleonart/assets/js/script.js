;(function(){'use strict';var pageTitle=document.head.getElementsByTagName('title')[0].innerText;if(pageTitle==='Bienvenue - Saint-Léon\'Art'){var timeToLaunch=function timeToLaunch(){var currentDate=new Date();var diff=(currentDate-targetDate)/1000;var diff=Math.abs(Math.floor(diff));days=Math.floor(diff/(24*60*60));sec=diff-days*24*60*60;hrs=Math.floor(sec/(60*60));sec=sec-hrs*60*60;min=Math.floor(sec/60);sec=sec-min*60;};var countDownTimer=function countDownTimer(){timeToLaunch();$("#days .number").text(days);$("#hours .number").text(hrs);$("#minutes .number").text(min);setTimeout(countDownTimer,1000);};var numberTransition=function numberTransition(id,endPoint,transitionDuration,transitionEase){$({numberCount:$(id).text()}).animate({numberCount:endPoint},{duration:transitionDuration,easing:transitionEase,step:function step(){$(id).text(Math.floor(this.numberCount));},complete:function complete(){$(id).text(this.numberCount);}});};var targetDate=new Date("2018/08/19 18:00:00");var days;var hrs;var min;var sec;$(function(){timeToLaunch();numberTransition('#days .number',days,1000,'easeOutQuad');numberTransition('#hours .number',hrs,1000,'easeOutQuad');numberTransition('#minutes .number',min,1000,'easeOutQuad');setTimeout(countDownTimer,1001);});;}var hamburger=document.querySelector('.hamburger');var search=document.querySelector('.search-icon');var sidebarOpened=false;function openMenu(){document.body.classList.add('has-sidebar');hamburger.classList.add('is-active');sidebarOpened=true;return;}function closeMenu(){document.body.classList.remove('has-sidebar');hamburger.classList.remove('is-active');sidebarOpened=false;return;}hamburger.addEventListener('click',function(e){e.stopPropagation();e.preventDefault();if(!sidebarOpened){openMenu();}else{closeMenu();}});document.body.addEventListener('click',function(){if(sidebarOpened){document.body.classList.remove('has-sidebar');hamburger.classList.remove('is-active');sidebarOpened=false;return;}});search.addEventListener('click',function(e){e.stopPropagation();e.preventDefault();search.classList.toggle('open');search.parentNode.classList.toggle('open');search.parentNode.parentNode.classList.toggle('open');});if(pageTitle===' » Programme - Saint-Léon\'Art'){var fActive=function fActive(e){e.stopPropagation();if(document.querySelector('.program__navigation .day a.active')){document.querySelector('.program__navigation .day a.active').classList.remove('active');document.querySelector('.program .timeline.all#all').classList.remove('here');}e.currentTarget.classList.add('active');};var buttons=document.querySelectorAll('.program__navigation .day a');;Array.from(buttons).forEach(function($btn){$btn.addEventListener("click",fActive);});}if(pageTitle===' » À propos - Saint-Léon\'Art'){var fCancelAnchor=function fCancelAnchor(e){e.preventDefault();};var bullets=document.querySelectorAll('.bullets_nav');var translateValue;Array.from(bullets).forEach(function($btn){$btn.addEventListener("click",fCancelAnchor);$btn.addEventListener('click',function(){if(window.matchMedia("(max-width: 739px)").matches){var translateValue=$btn.getAttribute('data-translateValue-mobile');}else{var translateValue=$btn.getAttribute('data-translateValue-desktop');}if($btn.parentNode.querySelector('.active')){$btn.parentNode.querySelector('.active').classList.remove('active');}document.querySelector('.slider').style.transform='translateX('+translateValue+')';$btn.classList.add('active');if(document.querySelectorAll('.slider .precNext')){document.querySelectorAll('.slider .precNext')[0].classList.remove('precNext');document.querySelectorAll('.slider .precNext')[0].classList.remove('precNext');}img[$btn.getAttribute('data-prec-img')].classList.toggle('precNext');img[$btn.getAttribute('data-next-img')].classList.toggle('precNext');});});var prevNext=document.querySelectorAll('.prevNext div button');Array.from(prevNext).forEach(function($prevNext){$prevNext.addEventListener("click",fCancelAnchor);$prevNext.addEventListener("click",function(){if(window.matchMedia("(max-width: 739px)").matches){var translateValue=$prevNext.getAttribute('data-translateValue-mobile');}else{var translateValue=$prevNext.getAttribute('data-translateValue-desktop');}document.querySelector('.slider').style.transform='translateX('+translateValue+')';var prevNextParent=$prevNext.parentNode.parentNode;prevNextParent.childNodes[$prevNext.getAttribute('data-next')].style.visibility='visible';prevNextParent.childNodes[$prevNext.getAttribute('data-prec')].style.visibility='hidden';if(document.querySelectorAll('.slider .precNext')){document.querySelectorAll('.slider .precNext')[0].classList.remove('precNext');document.querySelectorAll('.slider .precNext')[0].classList.remove('precNext');}img[$prevNext.getAttribute('data-prec-img')].classList.toggle('precNext');img[$prevNext.getAttribute('data-next-img')].classList.toggle('precNext');var btnA=document.querySelectorAll('.bullets_nav');var btn=document.querySelector('.bullets_nav');if(document.querySelector('.bullets .active')){document.querySelector('.bullets .active').classList.remove('active');}btnA[$prevNext.getAttribute('data-focus')].classList.add('active');});$;});var img=document.querySelectorAll('.slider div');$('.count').each(function(){$(this).prop('Counter',0).animate({Counter:$(this).text()},{duration:4000,easing:'swing',step:function step(now){$(this).text(Math.ceil(now));}});});}var fAnimInput=function fAnimInput(){var input=document.querySelectorAll('.input');var getFocus=function getFocus(oEvent){oEvent.currentTarget.parentNode.querySelector('label').classList.add("focus");var oInput=oEvent.currentTarget.parentNode.querySelector('.input');setTimeout(function(){oInput.classList.add("border");},200);};var outFocus=function outFocus(e){if(e.currentTarget.parentNode.querySelector('.input').value.length===0){e.currentTarget.parentNode.querySelector('label').classList.remove("focus");}e.currentTarget.classList.remove("border");};Array.from(input).forEach(function($label){$label.addEventListener("focus",getFocus);$label.addEventListener("click",getFocus);$label.addEventListener("blur",outFocus);if($label.value!=""){$label.parentNode.querySelector('label').classList.add("focus");}});};fAnimInput();if(pageTitle===' » Tous les artistes - Saint-Léon\'Art'){jQuery(function($){$('#filter').submit(function(){var filter=$('#filter');$.ajax({url:filter.attr('action'),data:filter.serialize(),type:filter.attr('method'),success:function success(data){$('.artist__container').html(data);console.log(data);}});return false;});});}if(pageTitle===' » Tous les événements - Saint-Léon\'Art'){jQuery(function($){$('#event_filter').submit(function(){var filter=$('#event_filter');$.ajax({url:filter.attr('action'),data:filter.serialize(),type:filter.attr('method'),success:function success(data){$('.event__container').html(data);console.log(data);}});return false;});});}if(pageTitle===' » Actualités - Saint-Léon\'Art'){jQuery(function($){$('#news_filter').submit(function(){var filter=$('#news_filter');$.ajax({url:filter.attr('action'),data:filter.serialize(),type:filter.attr('method'),success:function success(data){$('.event__container').html(data);console.log(data);}});return false;});});}if(window.matchMedia("(min-width: 980px)").matches){var fAddLogoMenu=function fAnimMenu(){var menu=document.querySelector('ul.menu');var li=document.createElement("li");var span=document.createElement('span');var sheet=window.document.styleSheets[0];var midle=menu.childNodes[7];li.appendChild(span);span.appendChild(document.createTextNode("SaintLeon'Art"));menu.insertBefore(li,midle.nextSibling);li.classList.add('menu__item');li.classList.add('logo');span.classList.add('logo');menu.classList.add('onScroll');sheet.insertRule('.header {padding-top: 0px;}',sheet.cssRules.length);};var fRemoveLogoMenu=function fRemoveLogoMenu(e){var sheet=window.document.styleSheets[0];var menu=document.querySelector('ul.menu');var logo=menu.querySelector('.menu__item.logo');menu.classList.remove('onScroll');menu.removeChild(logo);sheet.insertRule('.header {padding-top: 24px;}',sheet.cssRules.length);};var AnimMenu=function(){var executed=false;var actionDo=false;return function(e){if(!executed){if(window.pageYOffset>10){executed=true;actionDo=true;fAddLogoMenu();}}if(actionDo&&executed){if(window.pageYOffset<10){actionDo=false;executed=false;fRemoveLogoMenu();}}};}();window.addEventListener('scroll',AnimMenu);window.addEventListener('load',AnimMenu);}function PathLoader(el){this.el=el;this.strokeLength=el.getTotalLength();this.el.style.strokeDasharray=this.el.style.strokeDashoffset=this.strokeLength;}PathLoader.prototype._draw=function(val){this.el.style.strokeDashoffset=this.strokeLength*(1-val);};PathLoader.prototype.setProgress=function(val,cb){this._draw(val);if(cb&&typeof cb==='function')cb();};PathLoader.prototype.setProgressFn=function(fn){if(typeof fn==='function')fn(this);};var body=document.body,svg=document.querySelector('svg path');if(svg!==null){svg=new PathLoader(svg);setTimeout(function(){document.body.classList.add('active');svg.setProgress(1);},200);}})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
